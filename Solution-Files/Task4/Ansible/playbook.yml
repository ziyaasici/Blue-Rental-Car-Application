---
- name: Update System Packages
  hosts: _Blue_Rental_Task4
  gather_facts: no
  become: yes
  remote_user: ubuntu

  vars:
    aws_region: us-east-1
    aws_account_id: ""
    ecr_registry: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com"

  tasks:

    - name: Install K3S
      shell: curl -sfL https://get.k3s.io | sh -
      
    - name: Set permissions for k3s.yaml
      file:
        path: /etc/rancher/k3s/k3s.yaml
        mode: 'u+r'

    - name: Set KUBECONFIG environment variable
      shell: export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

    - name: Download kompose
      shell: curl -L https://github.com/kubernetes/kompose/releases/download/v1.33.0/kompose-linux-amd64 -o kompose

    - name: Install kompose using snap
      snap:
        name: kompose
        state: present

    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - lsb-release

    - name: Add Docker's official GPG key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker repository to APT sources
      shell: >
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install Docker CE
      apt:
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Download docker-compose
      shell: >
        curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

    - name: Set permissions for docker-compose
      file:
        path: /usr/local/bin/docker-compose
        mode: 'u+x'

    - name: Copy docker-compose.yml to the server
      copy:
        src: "{{ compose_dir }}/docker-compose.yml"
        dest: /home/ubuntu/docker-compose.yml
        owner: ubuntu  # Set the owner to ubuntu
        group: ubuntu  # Set the group to ubuntu
        mode: '0664' 
        
    - name: Ensure kompose is executable
      file:
        path: /home/ubuntu/kompose
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Convert docker-compose file
      command: kompose convert -f docker-compose.yml
      args:
        chdir: /home/ubuntu

    - name: Copy script to instance
      copy:
        src: "{{ convert_dir }}/kompose-convert.sh"
        dest: /home/ubuntu/kompose-convert.sh
        mode: "0755"

    - name: Execute script on managed EC2 instance
      script: /home/ubuntu/kompose-convert.sh

  #   - name: Getting AWS Account ID
  #     shell: aws sts get-caller-identity --query 'Account' --output text
  #     register: account_id
    
  #   - name: Assing AWS Account ID to Variable
  #     set_fact:
  #       aws_account_id: "{{ account_id.stdout }}"

  #   - name: Log in to AWS ECR
  #     shell: |
  #       aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 621627302500.dkr.ecr.us-east-1.amazonaws.com
  #     environment:
  #       AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
  #       AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
  #     register: aws_cli_result
  #     tags:
  #       - login_to_aws_ecr

  # - name: AWS CLI Test
  #   shell: |
  #     aws s3 ls
  #   environment:
  #     AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
  #     AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
  #   register: aws_cli_result
  #   tags:
  #     - aws_cli_test